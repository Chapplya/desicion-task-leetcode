class Node:
    def __init__(self, val, next=None):
        self.val = val
        self.next = next


class Solution1:
    def __init__(self, root):
        self.root = root

    def add(self, val):
        tmp = self.root
        while tmp.next:
            tmp = tmp.next
        tmp.next = Node(val=val)

    def print_lst(self):
        tmp = self.root

        while tmp:
            print(tmp.val, end=" ")
            tmp = tmp.next


class Solution:
    def __init__(self, root1, root2, res):
        self.root1 = root1
        self.root2 = root2
        self.res = res

    def add(self, val):
        tmp = self.res
        while tmp.next:
            tmp = tmp.next
        tmp.next = Node(val=val)

    def print_lst(self):
        tmp = self.res

        while tmp:
            print(tmp.val, end=" ")
            tmp = tmp.next

    # ФУНКЦИЯ ДЛЯ ЗАДАНИЯ

    def mergeTwoLists(self):
        lst1 = self.root1
        lst2 = self.root2
        start_res = self.res
        new_lst = start_res

        while lst1 and lst2:
            if lst1.val > lst2.val:
                new_lst.next = lst2
                lst2 = lst2.next
            else:
                new_lst.next = lst1
                lst1 = lst1.next
            new_lst = new_lst.next
        new_lst.next = lst1 or lst2

        self.res = start_res.next


root1 = Node(1)
root2 = Node(2)
result = Node(0)

lst1 = Solution1(root=root1)
lst2 = Solution1(root=root2)


lst1.add(3)
lst1.add(5)

lst2.add(4)
lst2.add(6)

lst1.print_lst()
print(" ")
lst2.print_lst()
print(" ")

lst_res = Solution(root1=root1, root2=root2, res=result)

lst_res.mergeTwoLists()
lst_res.print_lst()
